# -*- mode: shell-script -*-
#

# ######################################################################
# # VirtualEnv
# export WORKON_HOME=$HOME/.virtualenvs
# export PROJECT_HOME=$HOME/Dropbox/Development/python
# alias mkve='mkvirtualenv'
# alias setvep='setvirtualenvproject'
# . /usr/local/bin/virtualenvwrapper.sh

python_valid_identifier() {
  echo $(echo "$1" | sed -e 's/[^a-zA-Z0-9]/_/g' | tr '[A-Z]' '[a-z]')
}

create_tox_file() {
  toxini='tox.ini'
  rm -rf tox.ini
  cat << \EOF > ${toxini}
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# tox (https://tox.readthedocs.io/) is a tool for running tests in multiple
# virtualenvs. This configuration file will run the test suite on all supported
# python versions referenced in the 'envlist' (py{...}) below.

[tox]
skipsdist = True
envlist = py{37},flake8
skip_missing_interpreters = True

[testenv]
basepython = python3
# uncomment to omit testing package builds & installs for faster runs
skipsdist=True
whitelist_externals = python
extras = testing
deps =
    pytest
    coverage
commands =
    python setup.py develop
    pytest {posargs} --basetemp={envtmpdir} --verbose --cov=COMPONENT_NAME_HERE --cov-report html

[testenv:flake8]
skip_install = true
changedir = {toxinidir}
deps =
    flake8
    pep8-naming
    flake8-colors
commands =
    flake8 setup.py src/COMPONENT_NAME_HERE tests
    # --verbose

[flake8]
format = ${cyan}%(path)s${reset}:${yellow_bold}%(row)d${reset}:${green_bold}%(col)d${reset}: ${red_bold}%(code)s${reset} %(text)s
ignore =
    # E712    # poor comparison to False
    E501    # line too long
    # F401    # imported but unused
    # E722    # do not use bare except
    # E402    # module level import not at top of file
    # E241    # multiple spaces after ','
    # E226    # missing white space around arithmetic operator
    # E222    # multiple spaces after operator
    W503    # line break before binary operator
    W504    # line break after binary operator
EOF
python_name=$(python_valid_identifier $1)
perl -pi -e "s/COMPONENT_NAME_HERE/${python_name}/g" ${toxini}
}

customise_scaffold() {
  readmerst='README.rst'
  readme='README.md'

  perl -pi -e "s/=//g" $readmerst
  perl -pi -e "s/^($1)/# \1/g" $readmerst
  tail -n +2 $readmerst > $readme

  perl -pi -e "s/(Description)/## \1/g" $readme
  perl -pi -e "s/(Note)/## \1/g" $readme
  cat << \EOF >> $readme

## Dev

Add requirements using `pipenv`, e.g.:

```sh
$ pipenv install click
# or (for dev requirements)
$ pipenv install --dev pytest
```

To run tests AUTOMATICALLY:

```sh
$ autotox                           # Run from regular shell (NOT pipenv shell)
# or
$ pyautotest                        # Run from pipenv shell
```

To run tests MANUALLY:

```sh
$ tox                               # Run from regular shell (NOT pipenv shell)
# or
$ python setup.py test              # Run from pipenv shell
```

To view test coverage:

```sh
$ open htmlcov/index.html
```
EOF

  setupcfg='setup.cfg'
  perl -pi -e "s/(--cov\s*).*(--cov-report\s*).*/\1src \2html --last-failed/g" $setupcfg
  perl -pi -e "s/(description-file =) $readmerst/\1 $readme/g" $setupcfg
  perl -pi -e "s/\[(pytest)\]/\[tool:\1\]/g" $setupcfg

  create_tox_file $1

  rm -f $readmerst AUTHORS.rst CHANGELOG.rst LICENSE.txt

  rm -rf docs

  setup_test_dir

  scaffold_pipenv
}

customise_sam() {
  template='template.yaml'

  perl -pi -e "s/(CodeUri:\s*).*/\1src\//g" $template
  perl -pi -e "s/(Handler:\s*)(.*)/\1hello_world.\2/g" $template
  perl -pi -e "s/'|\"//g" $template
}

setup_test_dir() {
  mkdir -p tests/unit tests/fixtures
  mv -f tests/test_skeleton.py tests/unit
  touch tests/unit/__init__.py
}

scaffold_pipenv() {
  if [ -f requirements.txt ]; then
    pipenv install -r requirements.txt
  fi

  if [ -f test-requirements.txt ]; then
    pipenv install --dev -r test-requirements.txt
  fi

  rm -rf requirements.txt test-requirements.txt
}

reset_git() {
  rm -rf .git
  git init
  touch .gitignore
  cat .gitignore | grep -q -s "DS_Store"
  if [ $? -eq 1 ] ; then
    echo "\n" >> .gitignore
    curl -s 'https://raw.githubusercontent.com/github/gitignore/master/Global/macOS.gitignore' >> .gitignore
  fi
  # cat .gitignore | grep -q -s "Pipfile.lock"
  # if [ $? -eq 1 ] ; then
  #   echo "\n# pipenv" >> .gitignore
  #   echo "Pipfile.lock" >> .gitignore
  # fi
  git add .
  git commit -a -m "Initial project setup"
}

make_project_dir() {
  echo "Creating new python pipenv and project directory '$1' at $PWD/$1"
  mkdir -p $1 && cd $1
  pipenv --python $(which python3)
}

add_sam_makefile() {
  makefile='Makefile'
  rm -rf ${makefile}
  cat << \EOF > ${makefile}
  #!make
  SHELL := /bin/bash

  COMPONENT ?= COMPONENT_NAME_HERE
  SAM_ARTIFACTS_BUCKET ?= account-infrastructure-catsizerats-com-201901262215
  DEPLOYMENT_BUCKET ?= ${SAM_ARTIFACTS_BUCKET}

  SAM_BUILD_DIR := .aws-sam
  BUILD_PATH := ${SAM_BUILD_DIR}/build
  DEPLOYMENT_BUILD_PATH := deployment/build
  PYTHON_COMPONENT := $$(echo "${COMPONENT}" \
  	| sed -e 's/[^a-zA-Z0-9]/_/g' \
  	| tr '[A-Z]' '[a-z]')
  PYTHON_APP_DIR := src/${PYTHON_COMPONENT}
  BUILD_PACKAGE_DIR := ${BUILD_PATH}/src
  TEMPLATE_FILE := template.yaml
  DEPLOYMENT_FILE := main.yml
  CONFIG_PATH := deployment/config
  COMPONENTS_PATH := deployment/components

  USER ?= "unknown_user"
  DATE_STAMP := $$(date +"%Y%m%d.%H%M")
  BUILD_NUMBER ?= ${USER}/${DATE_STAMP}.SNAPSHOT
  BUILD_NUMBER_FILE := ${DEPLOYMENT_BUILD_PATH}/${COMPONENT}/build-number
  AWS_DEFAULT_REGION ?= ${AWS_REGION}

  LOCAL_DIR := ${DEPLOYMENT_BUILD_PATH}/${COMPONENT}
  PROPERTIES_FILE := ${COMPONENT}.properties
  PROPERTIES_FILE_PATH ?= ${LOCAL_DIR}/config/${PROPERTIES_FILE}

  make: sam-package

  pip-setup:
  	@ pip install --upgrade \
  		pipenv \
  		tox-pipenv \
  	&& pipenv install --dev

  pip-update: pip-setup

  test:
  	pipenv run python setup.py test

  clean:
  	@ rm -rf .tox .eggs .pytest_cache
  	@ find . -name "*.pyc" -depth -exec rm -rf {} \;
  	@ find . -name "__pycache__" -depth -exec rm -rf {} \;
  	@ find . -name "*.egg-info" -depth -exec rm -rf {} \;

  deploy-clean: clean
  	@ rm -rf lambda_package.zip ${DEPLOYMENT_BUILD_PATH}

  sam-local-clean:
  	@ rm -rf ${SAM_BUILD_DIR}

  sam-local-build:
  		@ pipenv lock \
  				--requirements \
  					| sed 's/-e //g' \
  					| pipenv run pip install \
  						--upgrade \
  						--requirement /dev/stdin \
  						--target ${BUILD_PACKAGE_DIR}
  		@ rsync \
  				--archive \
  				--prune-empty-dirs \
  				--include='*.py' \
  				--filter='hide,! */' \
  					${PYTHON_APP_DIR} \
  					${BUILD_PACKAGE_DIR}
  		@ cp \
  				${COMPONENTS_PATH}/${COMPONENT}/${TEMPLATE_FILE} \
  				${BUILD_PATH}

  deploy-build:
  	@ echo "Building ${PYTHON_COMPONENT} ${BUILD_NUMBER}"
  	@ pipenv lock \
  			--requirements \
  				| sed 's/-e //g' \
  				| pipenv run pip install \
  					--upgrade \
  					--requirement /dev/stdin \
  					--target ${DEPLOYMENT_BUILD_PATH}/${COMPONENT}/src
  	@ rsync \
  			--archive \
  			--prune-empty-dirs \
  			--include='*.py' \
  			--filter='hide,! */' \
  				${PYTHON_APP_DIR} \
  				${DEPLOYMENT_BUILD_PATH}/${COMPONENT}/src
  	@ cp \
  			${COMPONENTS_PATH}/${COMPONENT}/${TEMPLATE_FILE} \
  			${DEPLOYMENT_BUILD_PATH}/${COMPONENT}

  sam-local: sam-local-clean sam-local-build
  	@ sam local start-api \
  			--template ${BUILD_PATH}/${TEMPLATE_FILE}

  package:
  	@ cd ${BUILD_PACKAGE_DIR} && \
  		zip -r9 \
  			../../../lambda_package.zip \
  			*
  	@ rm -rf ${SAM_BUILD_DIR}

  check-properties-file:
  ifeq (,$(wildcard ${PROPERTIES_FILE_PATH}))
  	@ echo "" \
  	&& echo "Couldn't find properties config for BUILD_NUMBER: ${BUILD_NUMBER}" \
  	&& echo "Please check BUILD_NUMBER is correct, or include a" \
  	&& echo "PROPERTIES_FILE_PATH value at the command, i.e." \
  	&& echo "make command PROPERTIES_FILE_PATH=..." \
  	&& echo "" \
  	&& echo "... exiting"
  	@ (exit 1)
  endif

  sam-validate:
  	@ pipenv run sam validate \
  			--template ${COMPONENTS_PATH}/${COMPONENT}/${TEMPLATE_FILE}

  set-build-number:
  	@ mkdir -p ${DEPLOYMENT_BUILD_PATH}/${COMPONENT} \
  		&& echo "${BUILD_NUMBER}" > ${BUILD_NUMBER_FILE}

  sam-stage:
  	@ echo "Packaging version ${BUILD_NUMBER}"
  	@ pipenv run sam package \
  			--template-file ${DEPLOYMENT_BUILD_PATH}/${COMPONENT}/${TEMPLATE_FILE} \
  			--s3-bucket ${SAM_ARTIFACTS_BUCKET} \
  			--s3-prefix ${COMPONENT}/$$(<${BUILD_NUMBER_FILE}) \
  			--output-template-file ${DEPLOYMENT_BUILD_PATH}/${COMPONENT}/${DEPLOYMENT_FILE} \
  	&& echo "Uploaded SAM artifacts for BUILD_NUMBER: $$(<${BUILD_NUMBER_FILE})" \
  	&& pipenv run aws s3 cp \
  		${DEPLOYMENT_BUILD_PATH}/${COMPONENT}/${DEPLOYMENT_FILE} \
  		s3://${DEPLOYMENT_BUCKET}/${COMPONENT}/$$(<${BUILD_NUMBER_FILE})/${DEPLOYMENT_FILE} \
  	&& pipenv run aws s3 sync \
  		--exclude "*" \
  		--include "${PROPERTIES_FILE}" \
  			${CONFIG_PATH} \
  			s3://${DEPLOYMENT_BUCKET}/${COMPONENT}/$$(<${BUILD_NUMBER_FILE})/config \
  	&& echo "Uploaded files for BUILD_NUMBER: $$(<${BUILD_NUMBER_FILE})"

  sam-package: sam-validate deploy-clean deploy-build set-build-number sam-stage

  sam-sync-deploy-files:
  	@ rm -rf ${LOCAL_DIR}/config \
  	&& rm -rf ${LOCAL_DIR}/${DEPLOYMENT_FILE} \
  	&& pipenv run aws s3 sync \
  		s3://${DEPLOYMENT_BUCKET}/${COMPONENT}/$$(<${BUILD_NUMBER_FILE})/config \
  		${LOCAL_DIR}/config \
  	&& pipenv run aws s3 cp \
  		s3://${DEPLOYMENT_BUCKET}/${COMPONENT}/$$(<${BUILD_NUMBER_FILE})/${DEPLOYMENT_FILE} \
  		${LOCAL_DIR}/${DEPLOYMENT_FILE}

  sam-create-and-execute-change-set: check-properties-file
  	@ source ${PROPERTIES_FILE_PATH} \
  	&& echo "Deploying BUILD_NUMBER: $$(<${BUILD_NUMBER_FILE})" \
  	&& pipenv run sam deploy \
  			--capabilities \
  				CAPABILITY_NAMED_IAM \
  				CAPABILITY_IAM \
  			--template-file ${LOCAL_DIR}/${DEPLOYMENT_FILE} \
  			--no-fail-on-empty-changeset \
  			--stack-name ${COMPONENT}

  sam-deploy:
  	@ make sam-package \
  	&& make sam-sync-deploy-files \
  	&& make sam-create-and-execute-change-set

  sam-clean: deploy-clean
  	@ pipenv run aws s3 rm \
        --recursive \
        --exclude "*" \
        --include "*${USER}*" \
  				s3://${DEPLOYMENT_BUCKET}/${COMPONENT}/
  	@ pipenv run aws s3 rm \
  			--recursive \
  			--exclude "*" \
  			--include "*${USER}*" \
  				s3://${SAM_ARTIFACTS_BUCKET}/${COMPONENT}/
EOF
perl -pi -e "s/COMPONENT_NAME_HERE/$1/g" ${makefile}
}

add_scaffold() {
  : ${2:=--force}
  pipenv install --dev pyscaffold pytest pytest-cov pytest-mock
  pipenv run putup --tox $1 $2
  cp -Rf $1/.* .
  cp -Rf $1/* .
  rm -rf $1
  customise_scaffold $1
  pipenv run python setup.py develop
}

add_sam() {
  pipenv install --dev aws-sam-cli boto3 moto
  pipenv run sam init --runtime python --name $1
  mkdir -p tests/unit src
  mv -f $1/tests/unit/*.py tests/unit/
  mv -f $1/hello_world src
  mv -f $1/template.yaml .
  mv -f $1/README.md README-SAM.md
  touch .gitignore
  touch $1/.gitignore
  cat $1/.gitignore >> .gitignore
  customise_sam $1
  rm -rf $1
  pipenv run python setup.py develop
  add_sam_makefile $1
}

### python 2 version
py2new() {
  : ${2:=--force}
  echo "Creating new python pipenv and project directory '$1' at $PWD/$1"
  mkdir $1 && cd $1
  pipenv --python $(which python2)

  pipenv install --dev pyscaffold==2.5 tox
  pipenv run putup --tox $1 $2
  cp -rf $1/.* .
  cp -rf $1/* .
  rm -rf $1
  customise_scaffold $1

  reset_git

  pipenv run atom .

  pipenv shell
}
# call above with
# $ pynew foo [--update|--force]

### python 3 version
pynew() {
  make_project_dir $1

  add_scaffold $1 $2

  reset_git

  pipenv run atom .

  pipenv shell
}
# call above with
# $ pynewenv foo [--update]
# run py[auto]test from pipenv shell
# run [auto]tox from regular shell
######################################################################

### python 3 version
pynewsam() {
  make_project_dir $1

  add_scaffold $1 $2

  add_sam $1

  reset_git

  pipenv run atom .

  pipenv shell
}
# call above with
# $ pynewenv foo [--update]
######################################################################


pyautotest () {
  echo "Inititalising..."
  python setup.py test
  echo "watching for changes..."
  watchmedo shell-command                 \
    --wait                                \
    --drop                                \
    --patterns="*.py;*.txt;*.ini;*.cfg"   \
    --recursive                           \
    --ignore-pattern="*egg*;*.pyc;*.tox*;*.aws-sam*"  \
    --ignore-directories                  \
    --command='clear; echo "${watch_event_type} ${watch_src_path}"; echo "launching pytest..."; python setup.py test' \
    .
}

samautobuild () {
  echo "Inititalising..."
  make sam-local-clean
  make sam-local-build
  echo "watching for changes..."
  watchmedo shell-command                 \
    --wait                                \
    --drop                                \
    --patterns="*.py;*.txt;*.ini;*.cfg;*.yaml"   \
    --recursive                           \
    --ignore-pattern="*egg*;*.pyc;*.tox*;*.aws-sam*;*/tests/*;*/deployment/*"  \
    --ignore-directories                  \
    --command='clear; echo "${watch_event_type} ${watch_src_path}"; echo "launching fresh sam local start-api..."; make sam-local-clean; make sam-local-build' \
    .
}

autotox () {
  echo "Inititalising..."
  tox -q
  echo "watching for changes..."
  watchmedo shell-command                 \
    --wait                                \
    --drop                                \
    --patterns="*.py;*.txt;*.ini;*.cfg"   \
    --recursive                           \
    --ignore-pattern="*egg*;*.pyc;*.tox*;*.aws-sam*"  \
    --ignore-directories                  \
    --command='clear; echo "${watch_event_type} ${watch_src_path}"; echo "launching tox..."; tox -q' \
    .
}
